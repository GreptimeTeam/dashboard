import{aH as h,C as _,D as C,aI as s,aG as o,aK as W,H as q,G as e,aL as t,d as U,r as g,aE as R,aM as L,u as n,j as A,b5 as z,c as M,aF as E,o as X}from"./arco.1967c6d6.js";import{u as I,p as K,b as J,_ as G}from"./index.d5d4e725.js";import{s as Z}from"./vue.17a00e68.js";import{o as ee,T as te,u as se,d as oe,e as ae,_ as ne}from"./index.8a7fec57.js";import{s as le}from"./index.bcbad5f5.js";import"./chart.64957b9e.js";const ce={title:"Quick Start"},re=q('<h1>Getting Started</h1><h2>Preface</h2><p>Greetings from Greptime Play! Apart from just following a word-document guide, this interactive playground will quickly familiarize you with GreptimeDB and help you to get the most out of it.</p><div class="tip custom-block"><p class="custom-block-title">Cool feature alert:</p><p>All code blocks in this guide are editable and executable!</p></div><p>By hitting the <code>Run</code> button, the code will be executed and run in a temporary, private instance generated from <a href="https://greptime.com/product/cloud" target="_blank">GreptimeCloud</a>. <strong>You can also explore and experiment with different ideas by editing the codes.</strong></p><div class="danger custom-block"><p class="custom-block-title">Note that:</p><p>The instance is valid within <strong>1 hour</strong> once initiated, and you will need to create a new one when the time is up. So please never store important data in Greptime Play sessions.</p></div><h2>Sample data</h2><p>We will focus on an example of CPU usage in this document. The example is based on a table named <code>cpu_metrics</code>, which contains the following columns:</p><ul><li><code>hostname</code>: the host name of the machine</li><li><code>environment</code>: the environment of the service, e.g. production, staging, etc.</li><li><code>usage_user</code>: the percentage of CPU utilization that occurred while executing at the user level (application)</li><li><code>usage_system</code>: the percentage of CPU utilization that occurred while executing at the system level (kernel)</li><li><code>usage_idle</code>: the percentage of time that the CPU or CPUs were idle and the system did not have an outstanding disk I/O request</li><li><code>ts</code>: the timestamp of the record</li></ul><p>We will create a table named <code>cpu_metrics</code> and insert some data into it. Then we will use SQL to query the data. The query language used in this example is SQL. Let&#39;s get started!</p><h2>Create a Time-Series Table</h2><p>Let&#39;s start the journey by creating a simple <code>cpu_metrics</code> table. Note that we pre-defined <code>hostname</code> and <code>environment</code> as the primary keys; <code>ts</code> as time index, both are important to know in GreptimeDB. Click <code>Run</code> on the upper left in the panel below to create the table:</p>',12),ie=e("pre",null,[e("code",{class:"language-sql"},`CREATE TABLE IF NOT EXISTS cpu_metrics (
    hostname STRING,
    environment STRING,
    usage_user DOUBLE,
    usage_system DOUBLE,
    usage_idle DOUBLE,
    ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TIME INDEX(ts),
    PRIMARY KEY(hostname, environment)
);
`)],-1),de=q("<p>Once the green marker appears, run <code>DESC TABLE</code> to view the details of the table.</p><p>In GreptimeDB, there are three types of columns:</p><ul><li><code>PRIMARY KEY</code>: key columns that are used for sorting and partitioning</li><li><code>FIELD</code>: columns which store table values</li><li><code>TIME INDEX</code>: columns of data type TIME</li></ul>",3),ue=e("pre",null,[e("code",{class:"language-sql"},`DESC TABLE cpu_metrics;
`)],-1),_e=e("p",null,[t("GreptimeDB offers a schemaless approach to writing data that eliminates the need to manually create tables using additional protocols. See "),e("a",{href:"https://docs.greptime.com/user-guide/write-data#automatic-schema-generation",target:"_blank"},"Automatic Schema Generation"),t(".")],-1),he=e("h2",null,"Add Some Data",-1),pe=e("p",null,[t("Using the "),e("code",null,"INSERT"),t(" statement to easily add data to the table. Below example inserts three rows into the "),e("code",null,"cpu_metrics"),t(" table.")],-1),me=e("pre",null,[e("code",{class:"language-sql"},`INSERT INTO cpu_metrics
VALUES
    ('host_0','test',32,58,36,1680307200),
    ('host_1','test',29,65,20,1680307200),
    ('host_1','staging',12,32,50,1680307200),
    ('host_2','staging',67,15,42,1680307200),
    ('host_2','test',98,5,40,1680307200),
    ('host_3','test',98,95,7,1680307200),
    ('host_4','test',32,44,11,1680307200),
    ('host_0','test',31,57,37,1680307260),
    ('host_1','staging',11,31,52,1680307260),
    ('host_1','test',26,68,18,1680307260),
    ('host_2','staging',66,13,41,1680307200),
    ('host_2','test',99,6,39,1680307260),
    ('host_3','test',99,95,7,1680307260),
    ('host_4','test',31,44,11,1680307260),
    ('host_0','test',29,58,36,1680307320),
    ('host_1','staging',10,32,50,1680307320),
    ('host_1','test',32,63,22,1680307320),
    ('host_2','staging',65,15,40,1680307320),
    ('host_2','test',100,5,36,1680307320);
`)],-1),ge=e("p",null,"Ingest more entries by modifying the values and timestamps.",-1),fe=e("pre",null,[e("code",{class:"language-sql"},`INSERT INTO cpu_metrics
VALUES
    ('host_3','test',93,97,8,1680307320),
    ('host_4','test',31,43,11,1680307320),
    ('host_0','test',31,58,34,1680307380),
    ('host_1','test',34,58,20,1680307380),
    ('host_1','staging',10,31,49,1680307380),
    ('host_2','staging',72,16,36,1680307380),
    ('host_2','test',100,3,36,1680307380),
    ('host_3','test',98,94,5,1680307380),
    ('host_4','test',31,43,11,1680307380),
    ('host_0','test',34,57,37,1680307440),
    ('host_1','test',27,67,19,1680307440),
    ('host_1','staging',13,36,49,1680307440),
    ('host_2','test',98,3,38,1680307440),
    ('host_2','staging',70,13,38,1680307440),
    ('host_3','test',96,96,4,1680307440),
    ('host_4','test',36,44,12,1680307440);
`)],-1),ye=q('<p>See more about <a href="https://docs.greptime.com/reference/sql/insert" target="_blank"><code>INSERT</code> clause</a>.</p><h2>Query Data with SQL</h2><h3>Select all data</h3><p>Run the following SQL statement to query all rows in the table. After getting the results, click the <code>Chart</code> tab to see the visualized data. You can choose <code>Group By</code> options to make the visualized data group by <code>hostname</code> and <code>environment</code>.</p>',4),be=e("pre",null,[e("code",{class:"language-sql"},`SELECT * FROM cpu_metrics ORDER BY ts DESC;
`)],-1),ve=e("p",null,[t("You can also use "),e("code",null,"count()"),t(" function to get the number of rows in the table.")],-1),we=e("pre",null,[e("code",{class:"language-sql"},`SELECT count(*) FROM cpu_metrics;
`)],-1),Ee=e("h3",null,"Select a specific column and perform basic arithmetic",-1),Se=e("p",null,[t("Basic arithmetic can be performed on the selected column. For example, the following SQL statement selects the "),e("code",null,"usage_user"),t(" column and mutiply each value by 2.")],-1),ke=e("pre",null,[e("code",{class:"language-sql"},`SELECT usage_user, usage_user * 2 as twice_usage_user FROM cpu_metrics;
`)],-1),Te=q('<p>See more about <a href="https://docs.greptime.com/reference/sql/select" target="_blank"><code>SELECT</code> clause</a>.</p><h3>Filter data by <code>WHERE</code> clause</h3><p>The <code>WHERE</code> clause can be used to filter data. It supports comparisons against string, boolean, and numeric values. The following SQL statement selects the rows where the <code>usage_user</code> is greater than 50.</p>',3),Ce=e("pre",null,[e("code",{class:"language-sql"},`SELECT * FROM cpu_metrics WHERE usage_user > 50;
`)],-1),Re=e("p",null,[t("See more about "),e("a",{href:"https://docs.greptime.com/reference/sql/where",target:"_blank"},[e("code",null,"WHERE"),t(" clause")]),t(".")],-1),qe=e("h3",null,"Group query results",-1),xe=e("p",null,"Developers always want to see the general CPU usage to check if there are any problems with the resources. For example, the following SQL statement returns the average CPU usage group by hosts.",-1),Le=e("pre",null,[e("code",{class:"language-sql"},`SELECT hostname, 
    avg(usage_user) as usage_user_avg
    FROM cpu_metrics
    GROUP BY hostname;
`)],-1),Ie=e("p",null,[t("Multiple fields can be grouped together. The following SQL statement returns the average CPU usage group by "),e("code",null,"hostname"),t(" and "),e("code",null,"environment"),t(". The "),e("code",null,"mean"),t(" function alias of "),e("code",null,"avg"),t(" function also can be used to calculate the average value of each field.")],-1),De=e("pre",null,[e("code",{class:"language-sql"},`SELECT hostname, environment, 
    mean(usage_user) as usage_user_avg
    FROM cpu_metrics
    GROUP BY hostname, environment;
`)],-1),Oe=e("p",null,[t("95 percent usage reflects the peak usage of the CPU. The following SQL statement returns the 95 percent CPU usage group by "),e("code",null,"hostname"),t(" and "),e("code",null,"environment"),t(".")],-1),Pe=e("pre",null,[e("code",{class:"language-sql"},`SELECT hostname, environment, 
    approx_percentile_cont(usage_user, 0.95) as usage_user_95, 
    approx_percentile_cont(usage_system, 0.95) as usage_system_95, 
    approx_percentile_cont(usage_idle, 0.95) as usage_idle_95 
    FROM cpu_metrics
    GROUP BY hostname, environment;
`)],-1),Be=q('<p>See more about <a href="https://docs.greptime.com/reference/sql/group_by" target="_blank"><code>GROUP BY</code> clause</a>.</p><h3>More aggregate functions</h3><p>There are more aggregate functions available, change <code>avg</code> to any of these below and try out:</p><p><code>max</code> / <code>min</code> / <code>sum</code></p><h2>Try it Out</h2><p>Please start exploring by writing some queries in the panel below!</p>',6),Me=e("pre",null,[e("code",{class:"language-sql"},`
`)],-1),Ue=e("p",null,[t("For other advanced features like scripting and protocol supports, "),e("a",{href:"https://greptime.com/download/",target:"_blank"},"Download"),t(" and run GreptimeDB locally by following "),e("a",{href:"https://docs.greptime.com",target:"_blank"},"docs"),t(".")],-1);function F(p,f){const a=h("code-editor");return _(),C(W,null,[re,s(a,{lang:"sql"},{default:o(()=>[ie]),_:1}),de,s(a,{lang:"sql"},{default:o(()=>[ue]),_:1}),_e,he,pe,s(a,{lang:"sql"},{default:o(()=>[me]),_:1}),ge,s(a,{lang:"sql"},{default:o(()=>[fe]),_:1}),ye,s(a,{lang:"sql"},{default:o(()=>[be]),_:1}),ve,s(a,{lang:"sql"},{default:o(()=>[we]),_:1}),Ee,Se,s(a,{lang:"sql"},{default:o(()=>[ke]),_:1}),Te,s(a,{lang:"sql"},{default:o(()=>[Ce]),_:1}),Re,qe,xe,s(a,{lang:"sql"},{default:o(()=>[Le]),_:1}),Ie,s(a,{lang:"sql"},{default:o(()=>[De]),_:1}),Oe,s(a,{lang:"sql"},{default:o(()=>[Pe]),_:1}),Be,s(a,{lang:"sql"},{default:o(()=>[Me]),_:1}),Ue],64)}const $={render:F};$.__hmrId="/home/runner/work/dashboard/dashboard/src/views/dashboard/playground/docs/getting-started.md";const Ne=p=>({components:p,render:F}),Ae=Object.freeze(Object.defineProperty({__proto__:null,attributes:ce,VueComponent:$,VueComponentWith:Ne},Symbol.toStringTag,{value:"Module"})),Ge=U({__name:"index",props:{visible:{type:Boolean,default:!1}},setup(p,{expose:f}){I();const a=g(!1),r=()=>{a.value=!a.value},m=()=>{window.location.href="https://greptime.com/playground"};return f({toggleModal:r}),(i,d)=>{const v=h("a-modal");return _(),R(v,{class:"guide-modal",visible:n(a),"onUpdate:visible":d[0]||(d[0]=y=>A(a)?a.value=y:null),"mask-closable":!1,"ok-text":i.$t("playground.create"),"hide-cancel":!0,closable:!1,onOk:m},{title:o(()=>[t(L(i.$t("playground.refeshTitle")),1)]),footer:o(()=>[]),default:o(()=>[t(L(i.$t("playground.refeshNote")),1)]),_:1},8,["visible","ok-text"])}}}),Fe="https://api.greptime.cloud",$e=`${Fe}/playground/db`,Qe=p=>K.get($e,{params:{db_id:p}}),Ve={class:"code-editor"},Ye={class:"code"},je={key:0,class:"operations"},He={key:0,class:"results"},We={key:1,class:"logs"},ze=U({__name:"code-editor",props:{disabled:{type:Boolean,default:!1}},setup(p){var N;const f=g(!1),{runQuery:a}=J(),r=z(),m=I(),i=g(),d=g(!1);function v(l){var k,x;return l?(l=(x=(k=l==null?void 0:l[0])==null?void 0:k.children[0])==null?void 0:x.children,Object.keys(m).forEach(T=>{l=l.replace(new RegExp(`{{${T}}}`,"g"),m[T])}),l):""}const y=v((N=r==null?void 0:r.default)==null?void 0:N.call(r)),u=g(y),c=g({records:{rows:[],schema:{column_schemas:[]}},dimensionsAndXName:{dimensions:[],xAxis:""},key:-1,type:""}),b=g(),S=()=>{u.value=y,c.value={records:{rows:[],schema:{column_schemas:[]}},dimensionsAndXName:{dimensions:[],xAxis:""},key:-1,type:""},b.value=null,i.value=!1,d.value=!1},D=async()=>{var w;f.value=!0;const l=await a(u.value.trim(),"sql",!0);(w=l.lastResult)!=null&&w.records?(d.value=!0,c.value=l.lastResult,i.value=se(c.value).hasChart.value):d.value=!1,b.value=l.log,f.value=!1},O=M(()=>u.value!==y),P=M(()=>u.value.trim()===""),B=[le(),ee];return(l,w)=>{const k=h("a-button"),x=oe,T=h("a-tab-pane"),Q=ae,V=h("a-tabs"),Y=ne,j=h("a-list");return _(),C("div",Ve,[e("div",Ye,[p.disabled?E("",!0):(_(),C("div",je,[s(k,{disabled:n(P),loading:n(f),onClick:D},{default:o(()=>[t(L(l.$t("playground.run")),1)]),_:1},8,["disabled","loading"]),n(O)?(_(),R(k,{key:0,onClick:S},{default:o(()=>[t(L(l.$t("playground.reset")),1)]),_:1})):E("",!0)])),s(n(te),{modelValue:n(u),"onUpdate:modelValue":w[0]||(w[0]=H=>A(u)?u.value=H:null),extensions:B,disabled:p.disabled},null,8,["modelValue","disabled"])]),n(d)?(_(),C("div",He,[s(V,{class:"playground-tabs","default-active-key":"1"},{default:o(()=>[s(T,{key:"1",title:"Table"},{default:o(()=>[s(x,{data:n(c),hasHeader:!1},null,8,["data"])]),_:1}),n(i)?(_(),R(T,{key:"2",title:"Chart"},{default:o(()=>[s(Q,{data:n(c),hasHeader:!1},null,8,["data"])]),_:1})):E("",!0)]),_:1})])):E("",!0),n(b)?(_(),C("div",We,[s(j,{class:"log-list",size:"small",hoverable:!0,bordered:!1,split:!1},{default:o(()=>[s(Y,{codeType:"sql",log:n(b)},null,8,["log"])]),_:1})])):E("",!0)])}}});const Xe=G(ze,[["__scopeId","data-v-d7106d7a"]]),Ke={class:"markdown-container"},Je=U({__name:"index",setup(p){var u;const{isCloud:f}=Z(I()),a=I(),r=g(),m=g(""),i=Object.assign({"./docs/getting-started.md":Ae}),d=Object.entries(i).map(([c,b])=>{const{attributes:S}=b;return{title:S.title,key:c}})||[];m.value=(u=d[0])==null?void 0:u.key;const v=M(()=>{const{VueComponentWith:c}=i[m.value];return c({CodeEditor:Xe})}),y=c=>{[m.value]=c};return X(async()=>{if(a.lifetime==="temporary"&&f.value)try{const c=await Qe(a.dbId)}catch{r.value.toggleModal()}}),(c,b)=>{const S=h("a-tree"),D=h("a-layout-sider"),O=Ge,P=h("a-layout-content"),B=h("a-layout");return _(),R(B,{class:"layout"},{default:o(()=>[s(D,null,{default:o(()=>[s(S,{class:"script-tree",blockNode:"",data:n(d),"default-selected-keys":[n(m)],onSelect:y},null,8,["data","default-selected-keys"])]),_:1}),s(P,null,{default:o(()=>[e("div",Ke,[n(v)?(_(),R(n(v),{key:0})):E("",!0)]),s(O,{ref_key:"refreshPlaygroundModal",ref:r},null,512)]),_:1})]),_:1})}}});const nt=G(Je,[["__scopeId","data-v-ba4176fc"]]);export{nt as default};
