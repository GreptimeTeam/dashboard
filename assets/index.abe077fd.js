import{aH as p,C as _,D as C,aI as t,aG as s,aK as H,H as O,G as e,aL as a,d as A,r as g,aE as R,aM as x,u as n,j as U,b5 as z,c as M,aF as k,o as K}from"./arco.1967c6d6.js";import{u as I,p as W,b as J,_ as P}from"./index.7ceda27d.js";import{s as Z}from"./vue.17a00e68.js";import{o as ee,T as te,u as se,d as oe,e as ae,_ as ne}from"./index.69c474db.js";import{s as le}from"./index.25e307d2.js";import"./chart.64957b9e.js";const ce={title:"Quick Start"},re=O('<h1>Getting Started</h1><h2>Preface</h2><p>Greetings from Greptime Play! Apart from just following a word-document guide, this interactive playground will quickly familiarize you with GreptimeDB and help you to get the most out of it.</p><div class="tip custom-block"><p class="custom-block-title">Cool feature alert:</p><p>all code blocks in this guide are editable and executable!</p></div><p>By hitting the <code>Run</code> button, the code will be executed and run in a temporary, private instance generated from <a href="https://greptime.com/product/cloud">GreptimeCloud</a>. <strong>You can also explore and experiment with different ideas by editing the codes.</strong></p><div class="danger custom-block"><p class="custom-block-title">Note that:</p><p>The instance is valid within <strong>1 hour</strong> once initiated, and you will need to create a new one when the time is up. So please never store important data in Greptime Play sessions.</p></div><h2>Create a Time-Series Table</h2><p>Let&#39;s start the journey by creating a simple <code>system_metrics</code> table first. Note that we pre-defined <code>host</code> and <code>idc</code> as the primary keys; <code>ts</code> as time index, both are important to know in GreptimeDB. Click <code>Run</code> on the upper left in the panel below to create the table:</p>',8),de=e("pre",null,[e("code",{class:"language-sql"},`CREATE TABLE IF NOT EXISTS system_metrics (
    host STRING,
    idc STRING,
    cpu_util DOUBLE,
    memory_util DOUBLE,
    disk_util DOUBLE,
    ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(host, idc),
    TIME INDEX(ts)
);
`)],-1),ie=O("<p>Once the green marker appears, run <code>DESC TABLE</code> to view the details of the table.</p><p>In GreptimeDB, there are three types of columns:</p><ul><li><code>PRIMARY KEY</code>: key columns that are used for sorting and partitioning</li><li><code>FIELD</code>: columns which store table values</li><li><code>TIME INDEX</code>: columns of data type TIME</li></ul>",3),ue=e("pre",null,[e("code",{class:"language-sql"},`DESC TABLE system_metrics;
`)],-1),_e=e("h2",null,"Add Some Data",-1),pe=e("p",null,[a("Using the "),e("code",null,"INSERT"),a(" statement to easily add data to the table. Below example inserts three rows into the "),e("code",null,"system_metrics"),a(" table.")],-1),me=e("pre",null,[e("code",{class:"language-sql"},`INSERT INTO system_metrics
VALUES
    ("host1", "idc_a", 11.8, 10.3, 10.3, 1667446791450),
    ("host2", "idc_a", 80.1, 70.3, 90.0, 1667446792460),
    ("host1", "idc_b", 50.0, 66.7, 40.6, 1667446793470);
`)],-1),he=e("p",null,"Ingest more entries by modifying the values and timestamps.",-1),ge=e("pre",null,[e("code",{class:"language-sql"},`INSERT INTO system_metrics
VALUES
    ("host1", "idc_a", 30.2, 50.1, 11.0, 1667446794480),
    ("host2", "idc_a", 60.8, 74.9, 96.2, 1667446795490),
    ("host1", "idc_b", 30.0, 65.7, 40.2, 1667446796500);
`)],-1),fe=e("h2",null,"Query Data with SQL",-1),ye=e("p",null,"GreptimeDB fully supports SQL.",-1),be=e("pre",null,[e("code",{class:"language-sql"},`SELECT * FROM system_metrics ORDER BY ts DESC;
`)],-1),ve=e("p",null,[a("We list some SQL examples below of the "),e("code",null,"system_metrics"),a(" table, for you to get familiar with using SQL alongside GreptimeDB's functions.")],-1),Ee=e("p",null,[a("Use "),e("code",null,"count()"),a(" function to get the number of all rows in the table:")],-1),ke=e("pre",null,[e("code",{class:"language-sql"},`SELECT count(*) FROM system_metrics;
`)],-1),we=e("p",null,[a("The "),e("code",null,"avg()"),a(" function returns the average value of a certain field:")],-1),Te=e("pre",null,[e("code",{class:"language-sql"},`SELECT avg(cpu_util) FROM system_metrics;
`)],-1),Se=e("p",null,[a("Use the "),e("code",null,"GROUP BY"),a(" clause to group rows that have the same values into summary rows. The code below groups average memory usage by "),e("code",null,"idc"),a(":")],-1),Ce=e("pre",null,[e("code",{class:"language-sql"},`SELECT idc, avg(memory_util) FROM system_metrics GROUP BY idc;
`)],-1),Re=O("<p>There are more aggregate functions available, change <code>avg</code> to any of these below and try out:</p><p><code>max</code> / <code>min</code> / <code>sum</code> / <code>mean</code></p><h2>Try it Out</h2><p>Please start exploring by writing some queries in the panel below!</p>",4),De=e("pre",null,[e("code",{class:"language-sql"},`
`)],-1),xe=e("p",null,[a("For other advanced features like scripting and protocol supports, "),e("a",{href:"https://greptime.com/download/"},"Download"),a(" and run GreptimeDB locally by following "),e("a",{href:"https://docs.greptime.com"},"docs"),a(".")],-1);function F(m,f){const o=p("code-editor");return _(),C(H,null,[re,t(o,{lang:"sql"},{default:s(()=>[de]),_:1}),ie,t(o,{lang:"sql"},{default:s(()=>[ue]),_:1}),_e,pe,t(o,{lang:"sql"},{default:s(()=>[me]),_:1}),he,t(o,{lang:"sql"},{default:s(()=>[ge]),_:1}),fe,ye,t(o,{lang:"sql"},{default:s(()=>[be]),_:1}),ve,Ee,t(o,{lang:"sql"},{default:s(()=>[ke]),_:1}),we,t(o,{lang:"sql"},{default:s(()=>[Te]),_:1}),Se,t(o,{lang:"sql"},{default:s(()=>[Ce]),_:1}),Re,t(o,{lang:"sql"},{default:s(()=>[De]),_:1}),xe],64)}const $={render:F};$.__hmrId="/home/runner/work/dashboard/dashboard/src/views/dashboard/playground/docs/getting-started.md";const Ie=m=>({components:m,render:F}),Le=Object.freeze(Object.defineProperty({__proto__:null,attributes:ce,VueComponent:$,VueComponentWith:Ie},Symbol.toStringTag,{value:"Module"})),qe=A({__name:"index",props:{visible:{type:Boolean,default:!1}},setup(m,{expose:f}){I();const o=g(!1),r=()=>{o.value=!o.value},h=()=>{window.location.href="https://greptime.com/playground"};return f({toggleModal:r}),(d,i)=>{const v=p("a-modal");return _(),R(v,{class:"guide-modal",visible:n(o),"onUpdate:visible":i[0]||(i[0]=y=>U(o)?o.value=y:null),"mask-closable":!1,"ok-text":d.$t("playground.create"),"hide-cancel":!0,closable:!1,onOk:h},{title:s(()=>[a(x(d.$t("playground.refeshTitle")),1)]),footer:s(()=>[]),default:s(()=>[a(x(d.$t("playground.refeshNote")),1)]),_:1},8,["visible","ok-text"])}}}),Be="https://api.greptime.cloud",Ne=`${Be}/playground/db`,Me=m=>W.get(Ne,{params:{db_id:m}}),Oe={class:"code-editor"},Ae={class:"code"},Ge={key:0,class:"operations"},Ue={key:0,class:"results"},Pe={key:1,class:"logs"},Fe=A({__name:"code-editor",props:{disabled:{type:Boolean,default:!1}},setup(m){var G;const f=g(!1),{runQuery:o}=J(),r=z(),h=I(),d=g(),i=g(!1);function v(l){var T,D;return l?(l=(D=(T=l==null?void 0:l[0])==null?void 0:T.children[0])==null?void 0:D.children,Object.keys(h).forEach(S=>{l=l.replace(new RegExp(`{{${S}}}`,"g"),h[S])}),l):""}const y=v((G=r==null?void 0:r.default)==null?void 0:G.call(r)),u=g(y),c=g({records:{rows:[],schema:{column_schemas:[]}},dimensionsAndXName:{dimensions:[],xAxis:""},key:-1,type:""}),b=g(),w=()=>{u.value=y,c.value={records:{rows:[],schema:{column_schemas:[]}},dimensionsAndXName:{dimensions:[],xAxis:""},key:-1,type:""},b.value=null,d.value=!1,i.value=!1},L=async()=>{var E;f.value=!0;const l=await o(u.value.trim().replace(/\n/gi," "),"sql",!0);(E=l.lastResult)!=null&&E.records?(i.value=!0,c.value=l.lastResult,d.value=se(c.value).hasChart.value):i.value=!1,b.value=l.log,f.value=!1},q=M(()=>u.value!==y),B=M(()=>u.value.trim()===""),N=[le(),ee];return(l,E)=>{const T=p("a-button"),D=oe,S=p("a-tab-pane"),V=ae,Y=p("a-tabs"),j=ne,Q=p("a-list");return _(),C("div",Oe,[e("div",Ae,[m.disabled?k("",!0):(_(),C("div",Ge,[t(T,{disabled:n(B),loading:n(f),onClick:L},{default:s(()=>[a(x(l.$t("playground.run")),1)]),_:1},8,["disabled","loading"]),n(q)?(_(),R(T,{key:0,onClick:w},{default:s(()=>[a(x(l.$t("playground.reset")),1)]),_:1})):k("",!0)])),t(n(te),{modelValue:n(u),"onUpdate:modelValue":E[0]||(E[0]=X=>U(u)?u.value=X:null),extensions:N,disabled:m.disabled},null,8,["modelValue","disabled"])]),n(i)?(_(),C("div",Ue,[t(Y,{class:"playground-tabs","default-active-key":"1"},{default:s(()=>[t(S,{key:"1",title:"Table"},{default:s(()=>[t(D,{data:n(c),hasHeader:!1},null,8,["data"])]),_:1}),n(d)?(_(),R(S,{key:"2",title:"Chart"},{default:s(()=>[t(V,{data:n(c),hasHeader:!1},null,8,["data"])]),_:1})):k("",!0)]),_:1})])):k("",!0),n(b)?(_(),C("div",Pe,[t(Q,{class:"log-list",size:"small",hoverable:!0,bordered:!1,split:!1},{default:s(()=>[t(j,{codeType:"sql",log:n(b)},null,8,["log"])]),_:1})])):k("",!0)])}}});const $e=P(Fe,[["__scopeId","data-v-33daca4e"]]),Ve={class:"markdown-container"},Ye=A({__name:"index",setup(m){var u;const{isCloud:f}=Z(I()),o=I(),r=g(),h=g(""),d=Object.assign({"./docs/getting-started.md":Le}),i=Object.entries(d).map(([c,b])=>{const{attributes:w}=b;return{title:w.title,key:c}})||[];h.value=(u=i[0])==null?void 0:u.key;const v=M(()=>{const{VueComponentWith:c}=d[h.value];return c({CodeEditor:$e})}),y=c=>{[h.value]=c};return K(async()=>{if(o.lifetime==="temporary"&&f.value)try{const c=await Me(o.dbId)}catch{r.value.toggleModal()}}),(c,b)=>{const w=p("a-tree"),L=p("a-layout-sider"),q=qe,B=p("a-layout-content"),N=p("a-layout");return _(),R(N,{class:"layout"},{default:s(()=>[t(L,null,{default:s(()=>[t(w,{class:"script-tree",blockNode:"",data:n(i),"default-selected-keys":[n(h)],onSelect:y},null,8,["data","default-selected-keys"])]),_:1}),t(B,null,{default:s(()=>[e("div",Ve,[n(v)?(_(),R(n(v),{key:0})):k("",!0)]),t(q,{ref_key:"refreshPlaygroundModal",ref:r},null,512)]),_:1})]),_:1})}}});const We=P(Ye,[["__scopeId","data-v-ba4176fc"]]);export{We as default};
